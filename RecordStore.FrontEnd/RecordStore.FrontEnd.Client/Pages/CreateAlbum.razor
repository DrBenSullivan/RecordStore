@page "/albums/add"

@inject ISnackbar Snackbar
@inject NavigationManager Navigation

@using System.Text.Json

<PageTitle>Record Store - Add Album</PageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">Add Album</MudText>

<MudContainer>
    <MudPaper Class="pa-4">
        <MudForm @ref="_form">

            <MudTextField T="string"
                Label="Album Title"
                @bind-Value="_postAlbum.Title"
                Validation="_validateString"
                Required="true"/>

            <MudTextField T="string"
                Label="Artist Name"
                @bind-Value="_artistName"
                Validation="_validateString"
                Required="true"/>

            @if (_genres != null && _genres.Any())
            {
                <MudSelect T="int?"
                @bind-Value="_postAlbum.GenreId"
                Label="Genre"
                Clearable="true"
                Required="true">

                    @foreach (var genre in _genres)
                    {
                        <MudSelectItem T="int?" Value="genre.GenreId">@genre.GenreName</MudSelectItem>
                    }

                </MudSelect>
            }

            <MudNumericField T="int?"
                Label="Release Year"
                Test="Album Release Year"
                @bind-Value="_postAlbum.ReleaseYear"
                Validation="_validateYear" 
                Clearable="true"
                Required="true"/>

        </MudForm>
    </MudPaper>

    <MudPaper Class="pa-4 mt-4">
        <MudButton Variant="Variant.Filled" Color="Color.Success" DropShadow="false" OnClick="HandleResetClick" Class="mx-2" >Reset</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Error" DropShadow="false" OnClick="HandleSubmitClick" Class="mx-2" >Submit</MudButton>
    </MudPaper>

</MudContainer>

<GenresLoader @bind-Genres="_genres" />

@code {
    private MudForm _form = null!;
    private PostAlbum _postAlbum = new();
    private string? _artistName = null;
    private List<Genre>? _genres = null;

    private readonly JsonSerializerOptions _jsonOptions = new() { PropertyNamingPolicy = JsonNamingPolicy.CamelCase, PropertyNameCaseInsensitive = true };

    private void HandleResetClick()
    {
        _postAlbum = new();
        _artistName = null;
    }

    private async Task HandleSubmitClick()
    {
        Snackbar.Add("Please wait...", Severity.Info);

        var artistId = await GetArtistIdFromNameAsync();

        if (artistId == null) 
        {
            _artistName = string.Empty;
            return;
        }

        _postAlbum.ArtistId = artistId.Value;

        using var client = new HttpClient();
        client.DefaultRequestHeaders.Add("Access-Control-Allow-Origin", "http://localhost:5191");
        var response = await client.PostAsJsonAsync(new Uri("http://localhost:5034/api/albums"), _postAlbum, _jsonOptions);

        if (!response.IsSuccessStatusCode)
        {
            Snackbar.Add(await response.Content.ReadAsStringAsync(), Severity.Error);
            return;
        }

        var newAlbum = await response.Content.ReadFromJsonAsync<Album>(_jsonOptions);

        Snackbar.Add("Album successfully updated!", Severity.Success, null);

        Navigation.NavigateTo($"/albums/{newAlbum!.AlbumId}");
    }

    private static Func<string, string?> _validateString = (string input) =>
        string.IsNullOrEmpty(input)
            ? "This is a required field."
            : null;

    private static Func<int, string?> _validateYear = (int year) =>
        year < 1900 || year > 2025
            ? "Year must be between 1900 and 2025"
            : null;

    private async Task<int?> GetArtistIdFromNameAsync()
    {
        using var client = new HttpClient();
        client.DefaultRequestHeaders.Add("Access-Control-Allow-Origin", "http://localhost:5191");
        var response = await client.GetAsync(new Uri($"http://localhost:5034/api/artists/search/{_artistName}"));

        if (!response.IsSuccessStatusCode) 
        {
            Snackbar.Add(await response.Content.ReadAsStringAsync(), Severity.Error);
            return null;
        }

        var artist = await response.Content.ReadFromJsonAsync<Artist>(_jsonOptions);

        return artist!.ArtistId;
    }
}